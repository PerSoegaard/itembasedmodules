<!--@Include(../../Razor/functions/navigation.cshtml)-->

@using System.IO;
@using System.Text;
@using System.Text.RegularExpressions;
@using System.Xml;

@{
var request = HttpContext.Current.Request;
var response = HttpContext.Current.Response;
var posts = GetLoop("ItemPublisher:Items.List");
}

@functions {
	public string RenderRSSChannel(dynamic channel) {
		var settings = new XmlWriterSettings() {
			Indent = true
		};
		using (var output = new MemoryStream()) {
			using (var writer = XmlWriter.Create(output, settings)) {
			writer.WriteStartDocument();
	    writer.WriteStartElement("rss");
			writer.WriteAttributeString("version", "2.0");
			writer.WriteAttributeString("xmlns", "atom", null, "http://www.w3.org/2005/Atom");

	    writer.WriteStartElement("channel");
			writer.WriteStartElement("atom", "link", "http://www.w3.org/2005/Atom");
			writer.WriteAttributeString("href", channel.Link);
			writer.WriteAttributeString("rel", "self");
			writer.WriteAttributeString("type", "application/rss+xml");
			writer.WriteEndElement();
			writer.WriteElementString("link", channel.Link);
			writer.WriteElementString("title", channel.Title);
			writer.WriteElementString("description", channel.Description);
			writer.WriteElementString("ttl", channel.Ttl.ToString());

			foreach (var post in channel.Posts) {
				var description = post.GetString("ItemPublisher:Item.Excerpt");
				if (string.IsNullOrWhiteSpace(description)) {
					description = post.GetString("ItemPublisher:Item.Content");
				}
				if (string.IsNullOrWhiteSpace(description)) {
					description = description.Trim();
				}

 				var request = HttpContext.Current.Request;
				var link = string.Format("{0}://{1}{2}", request.Url.Scheme, request.Url.Host, post.GetValue("ItemPublisher:Item.Url"));

				writer.WriteStartElement("item");
				writer.WriteElementString("link", link);
				writer.WriteElementString("title", post.GetValue("ItemPublisher:Item.Title"));
				writer.WriteElementString("author", post.GetValue("ItemPublisher:Item.Author_Name"));
				writer.WriteElementString("pubDate", string.Format("{0:R}", post.GetValue("ItemPublisher:Item.Publication_Time")));
				writer.WriteStartElement("description");
				writer.WriteCData(description);
				writer.WriteEndElement();
				writer.WriteStartElement("guid");
				writer.WriteAttributeString("isPermaLink", "true");
				writer.WriteEndElement();
				writer.WriteEndElement();
			}

			writer.WriteEndElement();
			writer.WriteEndElement();
		}
			return Encoding.UTF8.GetString(output.ToArray());
		}
	}
}

@if (request["format"] == "rss") {
	try {
		response.Clear();
		response.ContentType = "application/rss+xml";
		response.Write(RenderRSSChannel(new {
					Title = @Pageview.Page.get_Value("PageMenuText"),
					Link = request.Url.AbsoluteUri,
					Description = "",
					Ttl = 60,
					Posts = posts
				}));
		response.End();
	} catch {}
}

<div class="blog posts">
	<div class="feeds">
		<a href='@BuildUrl(new { format = "rss" })'>RSS</a>
	</div>

	@if (posts.Count < 1) {
		<div class="alert warning">
			<!--@Translate(No_posts_found, "No posts found")-->
		</div>
	} else {
		foreach (var post in posts) {
			var url = post.GetValue("ItemPublisher:Item.Url");
			var excerpt = post.GetString("ItemPublisher:Item.Excerpt");
			if (string.IsNullOrEmpty(excerpt)) {
				excerpt = post.GetString("ItemPublisher:Item.Content");
			}
			if (!string.IsNullOrEmpty(excerpt)) {
				excerpt = Regex.Replace(excerpt, "<.*?>", string.Empty);
			}
			var author = new {
				name = post.GetString("ItemPublisher:Item.Author_Name"),
				email = post.GetString("ItemPublisher:Item.Author_EMail")
			};

			<article class="post">
				<header>
					<a href="@url">
						<h1 class="title">@post.GetValue("ItemPublisher:Item.Title")</h1>
					</a>

					<div class="well clearfix">
						<img class="author-image" src="http://www.gravatar.com/avatar/@Dynamicweb.Base.MD5HashToString(author.email)?d=identicon" alt="@author.name" />
						<span class="author-name">@author.name</span>
						<span class="publication-time">
 							<span class="date">@string.Format("{0:D}", post.GetValue("ItemPublisher:Item.Publication_Time"))</span>
							<!--<span class="time">@string.Format("{0:t}", post.GetValue("ItemPublisher:Item.Publication_Time"))</span>-->
						</span>
						<span class="comments-info">
							<a href="@url#comments"><!--@Translate(Comments, "Comments")--></a>
						</span>
					</div>
				</header>

				<div class="excerpt">@excerpt</div>
				<div class="read-more"><a href="@url"><!--@Translate(Read_more, "Read more")--></a></div>
			</article>
		}

		var currentPage = GetInteger("ItemPublisher:Items.Paging.CurrentPage");
		var numberOfPages = GetInteger("ItemPublisher:Items.Paging.TotalPages");

		<ul class="pager">
			@if (currentPage > 1) {
				<li class="previous">
					<a href="@BuildUrl(new { Page = currentPage-1 })">&larr; <!--@Translate(Newer_posts, "Newer posts")--></a>
				</li>
			}
			@if (currentPage < numberOfPages) {
				<li class="next">
					<a href="@BuildUrl(new { Page = currentPage+1 })"><!--@Translate(Older_posts, "Older posts")--> &rarr;</a>
				</li>
			}
		</ul>
	}
</div>
